This is the explanation for the model of the record service.
One Record represents one piece of data.
 - It belongs to someone, aka has an owner (which can be an account, but not necessarly).
 - It belongs to a collection, which is a named set of records.
 - It has an id, which distinguishes it from other records in the same collection entity. The id of a record is
 rather a type description, like age or price. There can be only one record with same id in the same collection entity.

 All Records > All Records By Owner > All Records By Owner And Collection > Specific Record of an Owner in a Collection.

 A RecordSet is a Runtime representation of some records. Usually it will be a set of records from the same owner and
 collection.

 Examples for tuples of OwnerId, CollectionId, RecordId:
 d2ccab57-e919-4810-89c8-496c453d72f0, default, 34
 d2ccab57-e919-4810-89c8-496c453d72f0, profile, age
 catalog, wares, price

 Of course Records also have values:

 (d2ccab57-e919-4810-89c8-496c453d72f0, profile, age) = 34
 (bbbbbbbb-e919-4810-89c8-496c453d72f0, profile, age) = 42
 (aaaaaaaa-e919-4810-89c8-496c453d72f0, profile, age) = 42


 (samsung-galaxy-s2, catalog, price) = 39900
 (samsung-galaxy-s3, catalog, price) = 89900
 (apple-iphone-4s, catalog, price) = 37900


==== OPEN QUESTIONS ====
Should record id be
  a) a string
  b) an integer (less readable, less memory)
  c) an object